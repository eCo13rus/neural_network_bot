<?php

namespace App\Services;

use App\Models\User;
use App\Models\UserState;
use App\Models\Transaction;
use App\Models\NeuralNetwork;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;

class UserInteractionService
{
    public function showMainMenu(int $chatId, int $telegramUserId): void
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::firstOrCreate(['telegram_id' => $telegramUserId]);
        Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', ['user_id' => $user->id, 'telegram_id' => $telegramUserId]);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'start'
        UserState::updateOrCreate(
            ['user_id' => $user->id],
            ['current_state' => 'start'],
        );
        Log::info('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è start', ['telegram_id' => $telegramUserId]);

        $keyboard = [
            ['–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å üîç', '–ú–æ–π –±–∞–ª–∞–Ω—Å üí∞'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥', '–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π üìã'],
        ];

        $replyKeyboardMarkup = json_encode([
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        ]);

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            'reply_markup' => $replyKeyboardMarkup,
        ]);
    }

    // –î–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞ —é–∑–µ—Ä–∞
    public function showUserBalance(int $chatId, $telegramUserId): void
    {
        $user = User::where('telegram_id', $telegramUserId)->first();

        if (!$user) {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            Log::error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ['telegramUserId' => $telegramUserId]);
            return;
        }

        $balance = $user->balance ?? 0; // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—á–∏—Ç–∞—Ç—å –µ–≥–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é

        $message = "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {$balance} —Ä—É–±–ª–µ–π";
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $message,
        ]);

        Log::info('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω', ['telegramUserId' => $telegramUserId, 'balance' => $balance]);
    }

    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    public function replenishBalance(int $chatId): void
    {
        $message = "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.";

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $message,
        ]);

        Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', ['chat_id' => $chatId]);
    }

    // –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞—Ü–∫–∏–π
    public function showUserTransactions(int $chatId, $telegramUserId): void
    {
        $user = User::where('telegram_id', $telegramUserId)->first();

        if (!$user) {
            Log::error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ['telegramUserId' => $telegramUserId]);
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            ]);
            return;
        }

        $transactions = Transaction::where('user_id', $user->id)->get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if ($transactions === null || $transactions->isEmpty()) {
            $message = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–µ –∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.";
        } else {
            $message = "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n";
            foreach ($user->transactions as $transaction) {
                $message .=
                    "–¢–∏–ø: {$transaction->type}, 
                –°—É–º–º–∞: {$transaction->amount}, 
                –î–∞—Ç–∞: " . $transaction->created_at->format('Y-m-d H:i:s') . "\n";
            }
        }

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $message,
        ]);
        Log::info('–¢—Ä–∞–Ω–∑–∞—Ü–∫–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω—ã', ['telegramUserId' => $telegramUserId, 'balance' => $transactions]);
    }

    // –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
    public function chooseNeuralNetwork(int $chatId): void
    {
        // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        $keyboard = [
            ['–ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞'],
            ['–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'],
            ['–ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞'],
            ['–ù–∞–∑–∞–¥ ‚óÄÔ∏è']
        ];

        $replyKeyboardMarkup = json_encode([
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false,
        ]);

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:",
            'reply_markup' => $replyKeyboardMarkup,
        ]);
        Log::info('–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π');
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    public function showNeuralNetworksByCategory(int $chatId, string $categoryType): void
    {
        $neuralNetworks = NeuralNetwork::where('type', $categoryType)->get();

        $buttons = $neuralNetworks->map(function ($network) {
            return ['text' => $network->name];
        })->toArray();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        $buttons = array_merge($buttons, [[
            'text' => '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'
        ], [
            'text' => '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚óÄÔ∏è'
        ]]);

        $keyboard = array_chunk($buttons, 2);

        $replyKeyboardMarkup = json_encode([
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false,
        ]);

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å:",
            'reply_markup' => $replyKeyboardMarkup,
        ]);

        Log::info('–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ['category' => $categoryType]);
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public function showSettingsMenu(int $chatId, int $telegramUserId): void
    {
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        $user = User::where('telegram_id', $telegramUserId)->first();

        if (!$user) {
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
            ]);
            return;
        }

        $userSettings = $user->userSetting()->first();

        if (!$userSettings || (!$userSettings->neural_network_text_id && !$userSettings->neural_network_image_id && !$userSettings->neural_network_tts_id)) {
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.",
            ]);
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $this->setUserState($user->id, 'entering_characters');

        $currentCount = $userSettings ? $userSettings->context_characters_count : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';

        $message = "–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: <strong>{$currentCount}</strong>.\n\n" .
            "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n" .
            "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ (0, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç):";

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => "<em>{$message}</em>",
            'parse_mode' => 'HTML',
        ]);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    public function setUserState(int $userId, string $state): void
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserState::updateOrCreate(
            ['user_id' => $userId],
            ['current_state' => $state]
        );
    }

    //–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    public function getUserState(int $userId): string
    {
        $userState = UserState::where('user_id', $userId)->first();

        return $userState ? $userState->current_state : 'default';
    }
}
